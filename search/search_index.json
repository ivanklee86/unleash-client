{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"unleash-client-python Welcome to the Unleash Python client documentation! This folder contains documentation related to the project. Installation Check out the package on Pypi ! pip install UnleashClient Initialization from UnleashClient import UnleashClient client = UnleashClient(\"https://unleash.herokuapp.com\", \"My Program\") client.initialize_client() To clean up gracefully: client.destroy() Checking if a feature is enabled A check of a simple toggle: client.is_enabled(\"My Toggle\") Specifying a default value: client.is_enabled(\"My Toggle\", default_value=True) Supplying application context: app_context = {\"userId\": \"test@email.com\"} client.is_enabled(\"User ID Toggle\", app_context)","title":"Home"},{"location":"#unleash-client-python","text":"Welcome to the Unleash Python client documentation! This folder contains documentation related to the project.","title":"unleash-client-python"},{"location":"#installation","text":"Check out the package on Pypi ! pip install UnleashClient","title":"Installation"},{"location":"#initialization","text":"from UnleashClient import UnleashClient client = UnleashClient(\"https://unleash.herokuapp.com\", \"My Program\") client.initialize_client() To clean up gracefully: client.destroy()","title":"Initialization"},{"location":"#checking-if-a-feature-is-enabled","text":"A check of a simple toggle: client.is_enabled(\"My Toggle\") Specifying a default value: client.is_enabled(\"My Toggle\", default_value=True) Supplying application context: app_context = {\"userId\": \"test@email.com\"} client.is_enabled(\"User ID Toggle\", app_context)","title":"Checking if a feature is enabled"},{"location":"changelog/","text":"v1.0.0 General * Implemented custom strategies. v0.3.0 General Implemented client specification tests. Cache changed to use Instance ID as key. Bugfixes (Major) Fixed interposed arguments in normalized_hash() (aka MurmerHash3 wrapper). Python client will now do the same thing as the other clients! (Major) Fixed issues with logic in random strategies. v0.2.0 General * Changed cache implementation. Instead of caching {feature toggle name: provisioning} we'll now cache the entire API response (and use it if the fetch fails in any way). v0.1.1 General Fixed Github link on pypi. Removed unused sphinx documentation. * Added documentation using mkdocs v0.1.0 General * First implementation of the Unleash Python client! Woo!","title":"Changelog"},{"location":"changelog/#v100","text":"General * Implemented custom strategies.","title":"v1.0.0"},{"location":"changelog/#v030","text":"General Implemented client specification tests. Cache changed to use Instance ID as key. Bugfixes (Major) Fixed interposed arguments in normalized_hash() (aka MurmerHash3 wrapper). Python client will now do the same thing as the other clients! (Major) Fixed issues with logic in random strategies.","title":"v0.3.0"},{"location":"changelog/#v020","text":"General * Changed cache implementation. Instead of caching {feature toggle name: provisioning} we'll now cache the entire API response (and use it if the fetch fails in any way).","title":"v0.2.0"},{"location":"changelog/#v011","text":"General Fixed Github link on pypi. Removed unused sphinx documentation. * Added documentation using mkdocs","title":"v0.1.1"},{"location":"changelog/#v010","text":"General * First implementation of the Unleash Python client! Woo!","title":"v0.1.0"},{"location":"customstrategies/","text":"Implementing a custom strategy Set up a custom strategy in Unleash. Note down the name - you'll need this exact value to ensure we're loading the custom strategy correctly. Create a custom strategy object by sub-classing the Strategy object. from UnleashClient.strategies import Strategy class CatTest(Strategy): def load_provisioning(self) -> list: return [x.strip() for x in self.parameters[\"sound\"].split(',')] def __call__(self, context: dict = None) -> bool: \"\"\" Turn on if I'm a cat. :return: \"\"\" default_value = False if \"sound\" in context.keys(): default_value = context[\"sound\"] in self.parsed_provisioning return default_value Create a dictionary where the key is the name of the custom strategy. my_custom_strategies = {\"amIACat\": CatTest} When initializing UnleashClient, provide the custom strategy dictionary. unleash_client = UnleashClient(URL, APP_NAME, custom_strategies=my_custom_strategies) Fire up Unleash! You can now use the \"amIACat\" strategy in a feature toggle.","title":"Custom Strategies"},{"location":"customstrategies/#implementing-a-custom-strategy","text":"Set up a custom strategy in Unleash. Note down the name - you'll need this exact value to ensure we're loading the custom strategy correctly. Create a custom strategy object by sub-classing the Strategy object. from UnleashClient.strategies import Strategy class CatTest(Strategy): def load_provisioning(self) -> list: return [x.strip() for x in self.parameters[\"sound\"].split(',')] def __call__(self, context: dict = None) -> bool: \"\"\" Turn on if I'm a cat. :return: \"\"\" default_value = False if \"sound\" in context.keys(): default_value = context[\"sound\"] in self.parsed_provisioning return default_value Create a dictionary where the key is the name of the custom strategy. my_custom_strategies = {\"amIACat\": CatTest} When initializing UnleashClient, provide the custom strategy dictionary. unleash_client = UnleashClient(URL, APP_NAME, custom_strategies=my_custom_strategies) Fire up Unleash! You can now use the \"amIACat\" strategy in a feature toggle.","title":"Implementing a custom strategy"},{"location":"development/","text":"Contributions welcome! Here's just some random notes on the development process. Setup pip install pipenv pipenv install --dev Testing Run tests: pipenv run test Run pylint: pylint UnleashClient Run mypy: mypy UnleashCLient It's good to run static analysis locally, otherwise CI build will fail! Release Land all your PRs. :) 1. Update changelog.md 1. mkdocs gh-deploy 1. bumpversion [major/minor/patch] 1. make build","title":"Development"},{"location":"development/#setup","text":"pip install pipenv pipenv install --dev","title":"Setup"},{"location":"development/#testing","text":"Run tests: pipenv run test Run pylint: pylint UnleashClient Run mypy: mypy UnleashCLient It's good to run static analysis locally, otherwise CI build will fail!","title":"Testing"},{"location":"development/#release","text":"Land all your PRs. :) 1. Update changelog.md 1. mkdocs gh-deploy 1. bumpversion [major/minor/patch] 1. make build","title":"Release"},{"location":"resources/","text":"Unleash Unleash Server unleash-client-node unleash-docker","title":"Resources"},{"location":"resources/#unleash","text":"Unleash Server unleash-client-node unleash-docker","title":"Unleash"},{"location":"strategy/","text":"Strategy __init__(params) A generic strategy objects. Arguments Argument Description Required? Type Default Value params 'parameters' key from strategy section (...from feature section) of /api/clients/features response N, but you probably should have one. :) Dictionary {} load_provisioning() Method to load data on object initialization, if desired. This should parse the raw values in self.parameters into format Python can comprehend. The value returned by load_provisioning() will be stored in the self.parsed_provisioning class variable when object is created. The superclass returns an empty list since most of Unleash's default strategies are list-based (in one way or another). _call_(context) Strategy implementation goes here. Arguments Argument Description Required? Type Default Value context Application Context N Dictionary {}","title":"Strategy"},{"location":"strategy/#strategy","text":"","title":"Strategy"},{"location":"strategy/#__init__params","text":"A generic strategy objects. Arguments Argument Description Required? Type Default Value params 'parameters' key from strategy section (...from feature section) of /api/clients/features response N, but you probably should have one. :) Dictionary {}","title":"__init__(params)"},{"location":"strategy/#load_provisioning","text":"Method to load data on object initialization, if desired. This should parse the raw values in self.parameters into format Python can comprehend. The value returned by load_provisioning() will be stored in the self.parsed_provisioning class variable when object is created. The superclass returns an empty list since most of Unleash's default strategies are list-based (in one way or another).","title":"load_provisioning()"},{"location":"strategy/#_call_context","text":"Strategy implementation goes here. Arguments Argument Description Required? Type Default Value context Application Context N Dictionary {}","title":"_call_(context)"},{"location":"unleashclient/","text":"UnleashClient __init__() A client for the Unleash feature toggle system. UnleashClient.__init__(url, app_name, instance_id, refresh_interval, metrics_interval, disable_metrics, custom_headers) Arguments Argument Description Required? Type Default Value url Unleash server URL Y String N/A app_name Name of your program Y String N/A instance_id Unique ID for your program N String unleash-client-python refresh_interval How often the unleash client should check for configuration changes. N Integer 15 metrics_interval How often the unleash client should send metrics to server. N Integer 60 disable_metrics Disables sending metrics to Unleash server. N Boolean F custom_headers Custom headers to send to Unleash. N Dictionary {} custom_strategies Custom strategies you'd like UnleashClient to support. N Dictionary {} initialize_client() Initializes client and starts communication with central unleash server(s). This kicks off: Client registration Provisioning poll * Stats poll destroy() Gracefully shuts down the Unleash client by stopping jobs, stopping the scheduler, and deleting the cache. You shouldn't need this too much! is_enabled() Checks if a feature toggle is enabled. Notes: * If client hasn't been initialized yet or an error occurs, flat will default to false. UnleashClient.is_enabled(feature_name, context, default_value) Arguments Argument Description Required? Type Default Value feature_name Name of feature Y String N/A context Custom information for strategies N Dictionary {} default_value Default value of feature. N Boolean F","title":"UnleashClient"},{"location":"unleashclient/#unleashclient","text":"","title":"UnleashClient"},{"location":"unleashclient/#__init__","text":"A client for the Unleash feature toggle system. UnleashClient.__init__(url, app_name, instance_id, refresh_interval, metrics_interval, disable_metrics, custom_headers) Arguments Argument Description Required? Type Default Value url Unleash server URL Y String N/A app_name Name of your program Y String N/A instance_id Unique ID for your program N String unleash-client-python refresh_interval How often the unleash client should check for configuration changes. N Integer 15 metrics_interval How often the unleash client should send metrics to server. N Integer 60 disable_metrics Disables sending metrics to Unleash server. N Boolean F custom_headers Custom headers to send to Unleash. N Dictionary {} custom_strategies Custom strategies you'd like UnleashClient to support. N Dictionary {}","title":"__init__()"},{"location":"unleashclient/#initialize_client","text":"Initializes client and starts communication with central unleash server(s). This kicks off: Client registration Provisioning poll * Stats poll","title":"initialize_client()"},{"location":"unleashclient/#destroy","text":"Gracefully shuts down the Unleash client by stopping jobs, stopping the scheduler, and deleting the cache. You shouldn't need this too much!","title":"destroy()"},{"location":"unleashclient/#is_enabled","text":"Checks if a feature toggle is enabled. Notes: * If client hasn't been initialized yet or an error occurs, flat will default to false. UnleashClient.is_enabled(feature_name, context, default_value) Arguments Argument Description Required? Type Default Value feature_name Name of feature Y String N/A context Custom information for strategies N Dictionary {} default_value Default value of feature. N Boolean F","title":"is_enabled()"}]}